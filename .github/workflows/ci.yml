name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio pytest-mock

    - name: Run backend unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        SECRET_KEY: test-secret-key-for-ci-minimum-32-characters-long
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        REFRESH_TOKEN_EXPIRE_HOURS: 168
        ENVIRONMENT: test
        SMTP_HOST: smtp.example.com
        SMTP_USER: test
        SMTP_PASSWORD: test
        EMAILS_FROM_EMAIL: test@example.com
        CLIENT_URL: http://localhost:3000
        CSRF_SECRET: test-csrf-secret-key
      run: |
        pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage-report
        path: htmlcov/

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run frontend unit tests
      run: npm run test:unit

    - name: Run frontend e2e tests
      run: npm run test:e2e

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          coverage/
          test-results/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Run security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Run performance tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        SECRET_KEY: test-secret-key-for-performance-minimum-32-characters-long
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        REFRESH_TOKEN_EXPIRE_HOURS: 168
        ENVIRONMENT: test
        SMTP_HOST: smtp.example.com
        SMTP_USER: test
        SMTP_PASSWORD: test
        EMAILS_FROM_EMAIL: test@example.com
        CLIENT_URL: http://localhost:3000
        CSRF_SECRET: test-csrf-secret-key
      run: |
        # Start the application in background
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 15
        
        # Wait for app to be ready
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'
        
        # Run performance tests
        locust -f performance_tests/locustfile.py --headless --users 5 --spawn-rate 1 --run-time 30s --html performance-report.html --host http://localhost:8000

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: backend-production
        push: false
        tags: garden-planner:backend
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: frontend-production
        push: false
        tags: garden-planner:frontend
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: garden-planner:latest

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-tests, performance-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download coverage reports
      uses: actions/download-artifact@v3
      with:
        name: backend-coverage-report
        path: backend-coverage/

    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: frontend-test-results
        path: frontend-results/

    - name: Download security reports
      uses: actions/download-artifact@v3
      with:
        name: security-reports
        path: security-reports/

    - name: Download performance report
      uses: actions/download-artifact@v3
      with:
        name: performance-report
        path: performance-reports/

    - name: Generate quality report
      run: |
        echo "=== QUALITY GATE REPORT ===" > quality-report.md
        echo "## Test Coverage" >> quality-report.md
        echo "- Backend: $(find backend-coverage -name '*.html' | head -1)" >> quality-report.md
        echo "- Frontend: $(find frontend-results -name 'coverage' | head -1)" >> quality-report.md
        echo "" >> quality-report.md
        echo "## Security Scan" >> quality-report.md
        echo "- Bandit: $(find security-reports -name 'bandit-report.json' | head -1)" >> quality-report.md
        echo "- Safety: $(find security-reports -name 'safety-report.json' | head -1)" >> quality-report.md
        echo "" >> quality-report.md
        echo "## Performance" >> quality-report.md
        echo "- Report: $(find performance-reports -name '*.html' | head -1)" >> quality-report.md

    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.md

    - name: Check quality gates
      run: |
        # Check if coverage is above 90%
        if [ -f "backend-coverage/index.html" ]; then
          echo "‚úÖ Backend coverage report generated"
        else
          echo "‚ùå Backend coverage report missing"
          exit 1
        fi
        
        # Check if security reports exist
        if [ -f "security-reports/bandit-report.json" ]; then
          echo "‚úÖ Security scan completed"
        else
          echo "‚ùå Security scan failed"
          exit 1
        fi
        
        # Check if performance report exists
        if [ -f "performance-reports/performance-report.html" ]; then
          echo "‚úÖ Performance tests completed"
        else
          echo "‚ùå Performance tests failed"
          exit 1
        fi
        
        echo "üéâ All quality gates passed!"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate, build]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gate, build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.production.yml up -d

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ CI/CD pipeline completed successfully!"
        # Add notification logic (Slack, email, etc.)

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå CI/CD pipeline failed!"
        # Add notification logic (Slack, email, etc.) 