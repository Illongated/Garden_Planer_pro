#!/bin/bash

# Agrotique Garden Planner - Quick Start Script
# This script automates the initial setup and deployment process

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Function to check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        error "Docker is not installed. Please install Docker first."
        echo "Visit: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose is not installed. Please install Docker Compose first."
        echo "Visit: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    # Check if Docker is running
    if ! docker info &> /dev/null; then
        error "Docker is not running. Please start Docker first."
        exit 1
    fi
    
    log "Prerequisites check passed"
}

# Function to generate secure passwords
generate_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
}

# Function to setup environment
setup_environment() {
    log "Setting up environment configuration..."
    
    if [[ -f ".env.production" ]]; then
        warning "Environment file already exists. Backing up..."
        cp .env.production .env.production.backup
    fi
    
    # Generate secure passwords
    POSTGRES_PASSWORD=$(generate_password)
    REDIS_PASSWORD=$(generate_password)
    SECRET_KEY=$(openssl rand -base64 64)
    BACKUP_ENCRYPTION_KEY=$(generate_password)
    GRAFANA_PASSWORD=$(generate_password)
    
    # Create environment file
    cat > .env.production << EOF
# Agrotique Garden Planner - Production Environment Configuration
# Generated by quick-start script on $(date)

# Database Configuration
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
POSTGRES_USER=agrotique_user
POSTGRES_DB=agrotique

# Redis Configuration
REDIS_PASSWORD=${REDIS_PASSWORD}

# Application Security
SECRET_KEY=${SECRET_KEY}
ENVIRONMENT=production
LOG_LEVEL=INFO

# Backup Configuration
BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
BACKUP_NOTIFICATION_WEBHOOK=

# Monitoring Configuration
GRAFANA_PASSWORD=${GRAFANA_PASSWORD}

# SSL/TLS Configuration (for Let's Encrypt)
DOMAIN=localhost
EMAIL=admin@example.com

# External Services (optional)
SLACK_WEBHOOK_URL=
SENTRY_DSN=

# Performance Configuration
WORKER_PROCESSES=4
MAX_CONNECTIONS=100
CACHE_TTL=3600

# Security Configuration
CORS_ORIGINS=http://localhost,https://localhost
ALLOWED_HOSTS=localhost,127.0.0.1
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=60

# Backup Retention
BACKUP_RETENTION_DAYS=30
EOF
    
    log "Environment file created: .env.production"
    log "Generated secure passwords and keys"
    
    # Display important information
    echo
    info "IMPORTANT: Save these credentials securely:"
    echo "PostgreSQL Password: ${POSTGRES_PASSWORD}"
    echo "Redis Password: ${REDIS_PASSWORD}"
    echo "Grafana Password: ${GRAFANA_PASSWORD}"
    echo "Backup Encryption Key: ${BACKUP_ENCRYPTION_KEY}"
    echo
}

# Function to build images
build_images() {
    log "Building Docker images..."
    
    # Build backend image
    log "Building backend image..."
    docker build -f Dockerfile.backend -t agrotique-backend:latest .
    
    # Build frontend image
    log "Building frontend image..."
    docker build -f Dockerfile.frontend -t agrotique-frontend:latest .
    
    log "Images built successfully"
}

# Function to start services
start_services() {
    log "Starting services..."
    
    # Create necessary directories
    mkdir -p logs data backups
    
    # Start services
    docker-compose -f docker-compose.production.yml up -d
    
    log "Services started successfully"
}

# Function to wait for services
wait_for_services() {
    log "Waiting for services to be ready..."
    
    local max_attempts=60
    local attempt=1
    
    while [[ ${attempt} -le ${max_attempts} ]]; do
        if curl -f -s http://localhost/health > /dev/null 2>&1; then
            log "Services are ready!"
            return 0
        fi
        
        info "Waiting for services... (attempt ${attempt}/${max_attempts})"
        sleep 10
        ((attempt++))
    done
    
    error "Services failed to start within expected time"
    return 1
}

# Function to display status
show_status() {
    log "Checking service status..."
    
    echo
    echo "=== Service Status ==="
    docker-compose -f docker-compose.production.yml ps
    
    echo
    echo "=== Service URLs ==="
    echo "Application: http://localhost"
    echo "API: http://localhost/api"
    echo "Grafana: http://localhost:3000 (admin / ${GRAFANA_PASSWORD})"
    echo "Prometheus: http://localhost:9090"
    
    echo
    echo "=== Health Checks ==="
    if curl -f -s http://localhost/health > /dev/null; then
        echo "‚úÖ Application is healthy"
    else
        echo "‚ùå Application health check failed"
    fi
    
    if curl -f -s http://localhost/api/health > /dev/null; then
        echo "‚úÖ API is healthy"
    else
        echo "‚ùå API health check failed"
    fi
}

# Function to show next steps
show_next_steps() {
    echo
    echo "=== Next Steps ==="
    echo "1. Access the application at: http://localhost"
    echo "2. Create your first user account"
    echo "3. Configure your domain and SSL certificates"
    echo "4. Set up monitoring alerts"
    echo "5. Configure backup notifications"
    echo
    echo "=== Useful Commands ==="
    echo "View logs: docker-compose -f docker-compose.production.yml logs -f"
    echo "Stop services: docker-compose -f docker-compose.production.yml down"
    echo "Restart services: docker-compose -f docker-compose.production.yml restart"
    echo "Backup database: docker-compose -f docker-compose.production.yml exec backup /backup.sh"
    echo
    echo "=== Documentation ==="
    echo "Production Guide: PRODUCTION_DEPLOYMENT.md"
    echo "Security Guide: SECURITY_DOCUMENTATION.md"
    echo "Performance Guide: PERFORMANCE_OPTIMIZATION.md"
}

# Main function
main() {
    echo "üöÄ Agrotique Garden Planner - Quick Start"
    echo "=========================================="
    echo
    
    # Check prerequisites
    check_prerequisites
    
    # Setup environment
    setup_environment
    
    # Build images
    build_images
    
    # Start services
    start_services
    
    # Wait for services
    if wait_for_services; then
        show_status
        show_next_steps
        log "Quick start completed successfully!"
    else
        error "Quick start failed. Check logs for details:"
        echo "docker-compose -f docker-compose.production.yml logs"
        exit 1
    fi
}

# Handle script arguments
case "${1:-}" in
    "help"|"--help"|"-h")
        echo "Agrotique Garden Planner - Quick Start Script"
        echo
        echo "Usage:"
        echo "  $0          - Run quick start setup"
        echo "  $0 help     - Show this help message"
        echo
        echo "This script will:"
        echo "  1. Check prerequisites (Docker, Docker Compose)"
        echo "  2. Generate secure passwords and keys"
        echo "  3. Create environment configuration"
        echo "  4. Build Docker images"
        echo "  5. Start all services"
        echo "  6. Verify deployment"
        echo
        echo "Prerequisites:"
        echo "  - Docker 20.10+"
        echo "  - Docker Compose 2.0+"
        echo "  - Internet connection for image downloads"
        echo
        exit 0
        ;;
    "")
        main
        ;;
    *)
        error "Invalid argument: ${1}"
        echo "Usage: $0 [help]"
        exit 1
        ;;
esac 