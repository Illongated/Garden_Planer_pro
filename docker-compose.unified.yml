# =============================================================================
# Garden Planner Pro - Unified Multi-Environment Configuration
# =============================================================================
# Usage:
#   Development:  docker-compose --profile dev up
#   Testing:      docker-compose --profile test up  
#   Production:   docker-compose --profile prod up
#   Quick dev:    docker-compose up (default, backend only)
# =============================================================================
# version: '3.9'  # Deprecated in Docker Compose v2

x-common-variables: &common-variables
  REDIS_PORT: 6379
  API_V1_STR: /api/v1

x-postgres-healthcheck: &postgres-healthcheck
  test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
  interval: 10s
  timeout: 5s
  retries: 5

x-redis-healthcheck: &redis-healthcheck
  test: ["CMD", "redis-cli", "ping"]
  interval: 10s
  timeout: 3s
  retries: 3

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  # Development Database
  postgres-dev:
    profiles: ["dev"]
    image: postgres:16-alpine
    container_name: garden_planner_db_dev
    environment:
      POSTGRES_USER: garden_planner_user
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: garden_planner_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck: *postgres-healthcheck
    networks:
      - garden_planner_network

  # Test Database (in-memory for speed)
  postgres-test:
    profiles: ["test"]
    image: postgres:16-alpine
    container_name: garden_planner_db_test
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: garden_planner_test
    ports:
      - "5433:5432"
    tmpfs:
      - /var/lib/postgresql/data
    healthcheck: *postgres-healthcheck
    networks:
      - test_network

  # Production Database
  postgres-prod:
    profiles: ["prod"]
    image: postgres:15-alpine
    container_name: agrotique-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: agrotique
      POSTGRES_USER: agrotique_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "5432:5432"
    healthcheck: *postgres-healthcheck
    networks:
      - agrotique-network

  # =============================================================================
  # CACHE SERVICES  
  # =============================================================================

  # Development Redis
  redis-dev:
    profiles: ["dev"]
    image: redis:7-alpine
    container_name: garden_planner_redis_dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data_dev:/data
    healthcheck: *redis-healthcheck
    networks:
      - garden_planner_network

  # Test Redis
  redis-test:
    profiles: ["test"]
    image: redis:7-alpine
    container_name: garden_planner_redis_test
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    healthcheck: *redis-healthcheck
    networks:
      - test_network

  # Production Redis
  redis-prod:
    profiles: ["prod"]
    image: redis:7-alpine
    container_name: agrotique-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck: *redis-healthcheck
    networks:
      - agrotique-network

  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================

  # Quick Development Backend (default profile)
  backend-quick:
    profiles: ["", "quick"]  # Default profile
    build:
      context: .
      target: development
    container_name: garden_planner_quick_dev
    environment:
      <<: *common-variables
      DATABASE_URL: postgresql+asyncpg://postgres:password@host.docker.internal:5432/garden_planner
      REDIS_HOST: host.docker.internal
      ENVIRONMENT: development
      SECRET_KEY: quick-dev-secret-key
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - garden_planner_network

  # Full Development Backend
  backend-dev:
    profiles: ["dev"]
    build:
      context: .
      target: development
    container_name: garden_planner_backend_dev
    environment:
      <<: *common-variables
      DATABASE_URL: postgresql+asyncpg://garden_planner_user:dev_password@postgres-dev:5432/garden_planner_dev
      REDIS_HOST: redis-dev
      ENVIRONMENT: development
      SECRET_KEY: dev-secret-key-not-for-production
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - garden_planner_network
    command: ["sh", "-c", "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"]

  # Test Backend
  backend-test:
    profiles: ["test"]
    build:
      context: .
      target: development
    container_name: garden_planner_backend_test
    environment:
      <<: *common-variables
      DATABASE_URL: postgresql+asyncpg://test_user:test_password@postgres-test:5432/garden_planner_test
      REDIS_HOST: redis-test
      ENVIRONMENT: test
      SECRET_KEY: test-secret-key-for-testing-minimum-32-characters-long
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - test_network
    command: ["sh", "-c", "alembic upgrade head && python -m pytest"]

  # Production Backend
  backend-prod:
    profiles: ["prod"]
    build:
      context: .
      target: production
    container_name: agrotique-backend
    restart: unless-stopped
    environment:
      <<: *common-variables
      DATABASE_URL: postgresql://agrotique_user:${POSTGRES_PASSWORD}@postgres-prod:5432/agrotique
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-prod:6379/0
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: production
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agrotique-network

  # =============================================================================
  # FRONTEND SERVICES (Production only)
  # =============================================================================

  frontend-prod:
    profiles: ["prod"]
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    container_name: agrotique-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - agrotique-network

  # =============================================================================
  # REVERSE PROXY (Production only)
  # =============================================================================

  nginx-prod:
    profiles: ["prod"]
    image: nginx:alpine
    container_name: agrotique-nginx
    restart: unless-stopped
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - frontend-prod
      - backend-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - agrotique-network

  # =============================================================================
  # MONITORING SERVICES (Production only)
  # =============================================================================

  prometheus:
    profiles: ["prod", "monitoring"]
    image: prom/prometheus:latest
    container_name: agrotique-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/monitoring.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - agrotique-network

  grafana:
    profiles: ["prod", "monitoring"] 
    image: grafana/grafana:latest
    container_name: agrotique-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - agrotique-network

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  # Development
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  
  # Production
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  backup_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  garden_planner_network:
    driver: bridge
    name: garden_planner_dev_network
    
  test_network:
    driver: bridge
    name: garden_planner_test_network
    
  agrotique-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16