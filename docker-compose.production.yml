version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agrotique-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: agrotique
      POSTGRES_USER: agrotique_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agrotique_user -d agrotique"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agrotique-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agrotique-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - agrotique-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: agrotique-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://agrotique_user:${POSTGRES_PASSWORD}@postgres:5432/agrotique
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agrotique-network

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: agrotique-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - agrotique-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: agrotique-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - agrotique-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: agrotique-prometheus
    restart: unless-stopped
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - agrotique-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: agrotique-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - agrotique-network

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: agrotique-alertmanager
    restart: unless-stopped
    volumes:
      - ./docker/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - agrotique-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: agrotique-backup
    restart: "no"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./scripts/backup.sh:/backup.sh:ro
      - backup_data:/backups
    depends_on:
      - postgres
    networks:
      - agrotique-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  backup_data:
    driver: local

networks:
  agrotique-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 