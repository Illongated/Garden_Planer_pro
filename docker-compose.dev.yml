# =============================================================================
# Garden Planner Pro - Development Environment
# Usage: docker-compose -f docker-compose.dev.yml up
# =============================================================================
version: '3.9'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: garden_planner_db_dev
    environment:
      POSTGRES_USER: garden_planner_user
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: garden_planner_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U garden_planner_user -d garden_planner_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - garden_planner_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: garden_planner_redis_dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data_dev:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - garden_planner_network

  # Backend API (Development with hot reload)
  backend:
    build:
      context: .
      target: development
    container_name: garden_planner_backend_dev
    environment:
      - DATABASE_URL=postgresql+asyncpg://garden_planner_user:dev_password@db:5432/garden_planner_dev
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENVIRONMENT=development
      - SECRET_KEY=dev-secret-key-not-for-production
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/node_modules  # Prevent overwriting node_modules
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - garden_planner_network
    command: ["sh", "-c", "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"]

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  garden_planner_network:
    driver: bridge
    name: garden_planner_dev_network